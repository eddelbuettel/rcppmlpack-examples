// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/rcppmlpackexamples_types.h"
#include <RcppArmadillo.h>
#include <RcppEnsmallen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// kMeans
Rcpp::List kMeans(const arma::mat& data, const int& clusters);
RcppExport SEXP _rcppmlpackexamples_kMeans(SEXP dataSEXP, SEXP clustersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const int& >::type clusters(clustersSEXP);
    rcpp_result_gen = Rcpp::wrap(kMeans(data, clusters));
    return rcpp_result_gen;
END_RCPP
}
// linearRegression
arma::vec linearRegression(const arma::mat& matX, const arma::rowvec& vecY, const double lambda, const bool intercept);
RcppExport SEXP _rcppmlpackexamples_linearRegression(SEXP matXSEXP, SEXP vecYSEXP, SEXP lambdaSEXP, SEXP interceptSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type matX(matXSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type vecY(vecYSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    rcpp_result_gen = Rcpp::wrap(linearRegression(matX, vecY, lambda, intercept));
    return rcpp_result_gen;
END_RCPP
}
// loanDefaultPrediction
Rcpp::List loanDefaultPrediction(arma::mat& loanDataFeatures, arma::vec& loanDataTargets, double pct);
RcppExport SEXP _rcppmlpackexamples_loanDefaultPrediction(SEXP loanDataFeaturesSEXP, SEXP loanDataTargetsSEXP, SEXP pctSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type loanDataFeatures(loanDataFeaturesSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type loanDataTargets(loanDataTargetsSEXP);
    Rcpp::traits::input_parameter< double >::type pct(pctSEXP);
    rcpp_result_gen = Rcpp::wrap(loanDefaultPrediction(loanDataFeatures, loanDataTargets, pct));
    return rcpp_result_gen;
END_RCPP
}
// randomForest
Rcpp::List randomForest(const arma::mat dataset, const arma::vec labels, double pct, int nclasses, int ntrees);
RcppExport SEXP _rcppmlpackexamples_randomForest(SEXP datasetSEXP, SEXP labelsSEXP, SEXP pctSEXP, SEXP nclassesSEXP, SEXP ntreesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type dataset(datasetSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type labels(labelsSEXP);
    Rcpp::traits::input_parameter< double >::type pct(pctSEXP);
    Rcpp::traits::input_parameter< int >::type nclasses(nclassesSEXP);
    Rcpp::traits::input_parameter< int >::type ntrees(ntreesSEXP);
    rcpp_result_gen = Rcpp::wrap(randomForest(dataset, labels, pct, nclasses, ntrees));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rcppmlpackexamples_kMeans", (DL_FUNC) &_rcppmlpackexamples_kMeans, 2},
    {"_rcppmlpackexamples_linearRegression", (DL_FUNC) &_rcppmlpackexamples_linearRegression, 4},
    {"_rcppmlpackexamples_loanDefaultPrediction", (DL_FUNC) &_rcppmlpackexamples_loanDefaultPrediction, 3},
    {"_rcppmlpackexamples_randomForest", (DL_FUNC) &_rcppmlpackexamples_randomForest, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_rcppmlpackexamples(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
